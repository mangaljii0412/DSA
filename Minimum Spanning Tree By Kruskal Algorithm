class DisjointSetUnion_By_Rank
{
    vector<int> rank,parent,size;
public:
    DisjointSetUnion_By_Rank(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1,1);
        for(int i = 0 ; i <= n ;i++)
        parent[i] = i;
    }

    int findparent(int node){
        if(node == parent[node])
            return node;
        return parent[node] =  findparent(parent[node]);
    }

    void union_by_rank(int u , int v){
        int ulp_u = findparent(u);
        int ulp_v = findparent(v);
        if(ulp_u == ulp_v) return ;
        if(rank[ulp_u] < rank[ulp_v])
            parent[ulp_u] = ulp_v;
        else if(rank[ulp_v] < rank[ulp_u])
            parent[ulp_v] = ulp_u;
        else{
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int,pair<int,int>>> edges;
        for(int i = 0 ; i < V ;i++){
            for(auto it : adj[i]){
                edges.push_back({it[1],{it[0] , i}});
            }
        }
        DisjointSetUnion_By_Rank ds(V);
        sort(edges.begin() , edges.end());
        int mstwt = 0;
        for(auto it : edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            if(ds.findparent(u) != ds.findparent(v)){
                mstwt += wt;
                ds.union_by_rank(u,v);
            }
        }
        return mstwt;
    }
};
