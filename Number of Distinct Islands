 void dfs(int row , int col , vector<vector<int>>& vis , vector<vector<int>>& grid , int trow , int tcol , vector<pair<int,int>>& vec, int roww , int coll){
      if(row >= 0 && row < trow && col >= 0 && col < tcol && !vis[row][col] && grid[row][col] == 1 ){
          vis[row][col] = 1 ;
          vec.push_back({row-roww , col-coll});
          dfs(row-1,col,vis,grid,trow,tcol,vec,roww,coll);
          dfs(row+1,col,vis,grid,trow,tcol,vec,roww,coll);
          dfs(row,col+1,vis,grid,trow,tcol,vec,roww,coll);
          dfs(row,col-1,vis,grid,trow,tcol,vec,roww,coll);
      }
  }
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0));
        set<vector<pair<int,int>>> st;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(!vis[i][j] && grid[i][j] == 1){
                    vector<pair<int,int>> vec;
                    dfs(i,j,vis,grid,n,m,vec,i,j);
                    st.insert(vec);
                }
            }
        }
        return st.size();
    }
