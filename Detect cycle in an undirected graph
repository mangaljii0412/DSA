//BFS
bool detectcyclebfs(int i , vector<int> adj[] , int vis[]){
      vis[i] = 1;
      queue<pair<int , int>> q;
      q.push({i , -1});
      while(!q.empty()){
          int node = q.front().first;
          int parent = q.front().second;
          q.pop();
          
          for(auto it : adj[node]){
              if(!vis[it]){
                  vis[it] = 1;
                  q.push({it , node});
              }
              else if(parent != it){
                  return true;
              }
          }
      }
      return false;
  }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V] = {0};
        for(int i = 0 ; i < V ; i++){
            if(!vis[i]){
                if(detectcyclebfs(i , adj , vis) == true)
                return true;
            }
        }
        return false;
    }





// DFS


bool detectcycledfs(int node , int parent ,vector<int> adj[] , int vis[]){
      vis[node] = 1;
      for(auto it : adj[node]){
          if(!vis[it]){
              if(detectcycledfs(it , node , adj , vis)) return true;
          }
          else if(it != parent) return true;
      }
      return false;
  }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V] = {0};
        for(int i = 0 ; i < V ; i++){
            if(!vis[i]){
                if(detectcycledfs(i,-1,adj,vis)) return true;
            }
        }
        return false;
    }
