class Solution {
public:

void dfs(int row ,int col , vector<vector<int>>& vis , vector<vector<char>> board , int trow , int tcol){
    if(row >= 0 && row < trow && col >= 0  && col < tcol && !vis[row][col] && board[row][col] == 'O'){
        vis[row][col] = 1;
        dfs(row-1,col,vis,board,trow,tcol);
        dfs(row+1,col,vis,board,trow,tcol);
        dfs(row,col-1,vis,board,trow,tcol);
        dfs(row,col+1,vis,board,trow,tcol);
    }
    else
    {
        return;
    }
}
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        // traverse first row or last row
        for(int j = 0 ; j < m ; j++){
            // first row
            if(!vis[0][j] && board[0][j] == 'O')
            dfs(0,j,vis,board,n,m);
            // last row
            if(!vis[n-1][j] && board[n-1][j] == 'O')
            dfs(n-1,j,vis,board,n,m);
        }
        // traverse first col or last col
        for(int i = 0 ; i < n ; i++){
            // first col
            if(!vis[i][0] && board[i][0] == 'O')
            dfs(i,0,vis,board,n,m);
            // last col
            if(!vis[i][m-1] && board[i][m-1] == 'O')
            dfs(i,m-1,vis,board,n,m);
        }
        
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(!vis[i][j] && board[i][j]=='O'){
                    board[i][j] = 'X';
                }
            }
        }
    }
};
