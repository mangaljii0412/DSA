class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>> adj[n];
        for(auto it : roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        
         priority_queue<pair<long long,int>,vector<pair<long long,int>>,greater<pair<long long,int>>> pq;
         vector<long long> distance(n,1e18);
         vector<long long> ways(n,0);
         distance[0] = 0;
         ways[0] = 1;
         pq.push({0,0});
         int mod = (int)(1e9 + 7);
         while(!pq.empty()){
             auto it = pq.top();
             long long  dist = it.first;
             int node = it.second;
             pq.pop();
             
             for(auto it : adj[node]){
                 int adjnode = it.first;
                 long long  edgeweight = it.second;
                 if(dist + edgeweight < distance[adjnode]) {
                     distance[adjnode] = dist + edgeweight;
                     pq.push({distance[adjnode] , adjnode});
                     ways[adjnode] = ways[node] ;
                 }
                 else if(dist + edgeweight == distance[adjnode]){
                     ways[adjnode] = (ways[adjnode]+ways[node]) % mod;
                 }
             }
         }
         return ways[n-1] % mod;
    }
};
