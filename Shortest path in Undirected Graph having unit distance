vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> adj[N];
        for(auto it : edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        
        vector<int> distance(N);
        for(int i = 0 ; i < N ;i++){
            distance[i] = 1e9;
        }
        
        queue<pair<int,int>> q;
        distance[src] = 0;
        q.push({src,0});
        while(!q.empty()){
            int node = q.front().first;
            int dist = q.front().second;
            q.pop();
            
            for(auto it : adj[node]){
                if(dist + 1 < distance[it]){
                    distance[it] = dist + 1 ;
                    q.push({it,distance[it]});
                }
            }
        }
        for(int i = 0 ; i < N ; i++){
            if(distance[i] == 1e9) distance[i] = -1;
        }
        return distance;
    }
