bool isLeaf(Node* root)
{
    if(root->left == NULL && root->right == NULL)
    return true;
    else
    return false;
}

void addleftBoundary(Node* root , vector<int> &ans)
{
    Node* curr = root->left;
    while(curr){
        if(!isLeaf(curr)) ans.push_back(curr->data);
        if(curr->left) curr = curr->left;
        else curr = curr->right;
    }
}

void addrightBoundary(Node* root , vector<int> &ans)
{
    Node* curr = root->right;
    vector<int> temp;
    while(curr)
    {
        if(!isLeaf(curr)) temp.push_back(curr->data);
        if(curr->right) curr = curr->right;
        else curr = curr->left;
    }
    for(int i = temp.size()-1;i>=0;--i){
        ans.push_back(temp[i]);    
    }
}

void addleaves(Node* root , vector<int> &ans)
{
    if(isLeaf(root)){ ans.push_back(root->data);
    return ;
    }
    if(root->left) addleaves(root->left , ans);
    if(root->right) addleaves(root->right , ans);
}

class Solution {
public:
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(!root) return ans;
        if(!isLeaf(root)) ans.push_back(root->data);
        addleftBoundary(root , ans);
        addleaves(root,ans);
        addrightBoundary(root , ans);
        return ans;
    }
};
