class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<pair<int,int>> adj[n+1];
        for(auto it : edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(n+1 , INT_MAX);
        vector<int> parent(n+1);
        for(int i = 1 ; i <= n ; i++)  parent[i] = i;
        dist[1] = 0;
        pq.push({0,1});
        while(!pq.empty()){
            auto it = pq.top();
            int node = it.second;
            int distance = it.first;
            pq.pop();
            
            for(auto it : adj[node]){
                int adjnode = it.first;
                int edgeweight = it.second;
                if(distance + edgeweight < dist[adjnode]){
                    dist[adjnode] = distance + edgeweight;
                    parent[adjnode] = node;
                    pq.push({dist[adjnode] , adjnode});
                }
            }
            
        }
        if(dist[n] == INT_MAX) return {-1};
        vector<int> path;
        int node = n;
        while(parent[node] != node){
            path.push_back(node);
            node = parent[node];
        }
        path.push_back(node);
        reverse(path.begin(),path.end());
        return path;
        
    }
};
