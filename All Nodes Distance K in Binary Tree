class Solution {
public:

void markparents(TreeNode* root , unordered_map<TreeNode* , TreeNode*> &parent)
{
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty())
    {
        TreeNode* node = q.front();
        q.pop();
        if(node->left){
        parent[node->left] = node;
        q.push(node->left);
        }
        if(node->right){
        parent[node->right] = node;
        q.push(node->right);
        }
    }
}
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
       unordered_map<TreeNode*,TreeNode*> parent;
        markparents(root , parent);

        unordered_map<TreeNode* , bool> visited;
        queue<TreeNode*> q;
        q.push(target);
        visited[target] = true;
        int distance = 0;
        while(!q.empty())
        {
           int size = q.size();
           if(distance == k) break;
           for(int i = 0 ; i < size ; i++)
           {
               TreeNode* node = q.front();
               q.pop();
               if(node->left && visited[node->left]!=true){
                   q.push(node->left);
                   visited[node->left] = true;
               } 
               if(node->right && visited[node->right]!=true){
                   q.push(node->right);
                   visited[node->right] = true;
               } 
               if(parent[node] && visited[parent[node]]!=true){
                   q.push(parent[node]);
                   visited[parent[node]] = true;
               } 
           }
            distance++;
        }
        vector<int> result;
        while(!q.empty()){
        TreeNode* node = q.front();
        q.pop();
        result.push_back(node->val);
    }
    return result;
    }
};

