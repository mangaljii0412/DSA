class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {

        queue<pair<int,pair<int,int>>> q;
        int n = grid.size();
        int m = grid[0].size();
        if(grid[0][0] == 1 || grid[n-1][m-1]==1) return -1;
        if(n==1) return 1;
        vector<vector<int>> dist(n,vector<int>(m,INT_MAX));
        dist[0][0] = 1;
        q.push({1,{0,0}});
        int dr[] = {-1,1,0,0,-1,1,1,-1};
        int dc[] = {0,0,-1,1,-1,-1,1,1};
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int dis = it.first;
            int r = it.second.first;
            int c = it.second.second;
            for(int i = 0 ; i < 8;i++){
                int newr = r+dr[i];
                int newc = c+dc[i];
                if(newr >= 0 && newr < n && newc >= 0 && newc < m 
                && grid[newr][newc]==0 && dis + 1 < dist[newr][newc]) {
                    dist[newr][newc] = dis + 1;
                    if(newr == n-1 && newc == n-1) return dist[newr][newc];
                    q.push({dist[newr][newc],{newr,newc}});
                }

            }
        }
        // if(dist[n-1][n-1]!=1e9)
        //     return dist[n-1][n-1];
        return -1;
    }
};
