
///BFS
class Solution {
public:
 bool bfs(int start , int V , vector<vector<int>>& graph , vector<int>& color){
     queue<int> q;
     q.push(start);
     color[start] = 0;
     while(!q.empty()){
         int node = q.front();
         q.pop();

         for(auto it : graph[node]){
             if(color[it] == -1){
                 color[it] = !color[node];
                 q.push(it);
             }
             else if(color[it] == color[node])
            {
                return false;
            }
         }
     }
     return true;
 }

    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n,-1);
        for(int i = 0 ; i < n ; i++){
            if(color[i] == -1){
                if(bfs(i , n , graph , color) == false) return false;
            }
        }
        return true;
    }
};



  ////DFS

bool dfs(int node , int col , vector<int>adj[] , vector<int> &color){
    color[node] = col;
    for(auto it : adj[node]){
        if(color[it] == -1){
	       if(!dfs(it,!col,adj,color)) return false;
	   }
	   else if(color[it] == col) return false;
    }
    return true;
}
	bool isBipartite(int V, vector<int>adj[]){
	    vector<int> color(V,-1);
	    for(int i = 0 ; i < V ;i++){
	        if(color[i] == -1){
	            if(!dfs(i,0,adj,color)) return false;
	        }
	    }
	    return true;
	}

